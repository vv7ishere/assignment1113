#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 20 05:01:33 2023

@author: vishnuv
"""

# -*- coding: utf-8 -*-
"""
Created on Fri Jan 20 02:00:29 2023

@author: HP
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.cluster as cluster
from sklearn.cluster import KMeans
from scipy.optimize import curve_fit
from sklearn import preprocessing
import itertools as iter


def read_and_filter_csv(file):
    """
    This function is used to read the csv file from the directory and to import
    the data for the Density clustering.

    file_name :- the name of the csv file with data.  
    """

    data = pd.read_csv(file)
    dataFrame = pd.DataFrame(data)
    print(dataFrame)
    dataFrame = dataFrame[['2010','2011','2012','2013','2014','2015','2016','2017','2018','2019']]
    dataFrame = dataFrame.iloc[12:21]
    return data, dataFrame




#pair plot comparing the two data
def pair_plot():
   
    data_plot = pd.DataFrame()
    Forest_area= []
    co2  = []
   
    for i in forest_area_data:
        Forest_area.extend(forest_area_data[i])

    for i in co2Gas_data:
        co2.extend(co2Gas_data[i])

    data_plot['Forest_area'] = Forest_area
    data_plot['co2'] = co2

    type(data_plot)

    sns.pairplot(data_plot[['co2','Forest_area']])
    plt.savefig("pair plot")

    '''function for finding K means clusttering'''
    kmeans1 = KMeans(n_clusters=3, random_state=0).fit(data_plot[['Forest_area','co2']])

    kmeans1.inertia_
    kmeans1.cluster_centers_

    data_plot['cluster'] = kmeans1.labels_
    print(data_plot)
   
    return data_plot



def scatter_plot_(data_plot):
   
    '''plot for K means clusttering before normalisation'''
    plt.figure()
    sns.scatterplot(x = 'co2', y = 'Forest_area' , hue='cluster', data = data_plot)
    plt.title("K-Means before normalisation")
    plt.savefig("scatter plot 1")
    plt.show()

    data_ = data_fr.drop(['cluster'], axis = 1)
   
   
    '''function called for clusttering'''
   
   
    names = ['co2','Forest_area']
    a = preprocessing.normalize(data_, axis=0)
    data_aft_k = pd.DataFrame(a,columns=names)
    kmeans2 = KMeans(n_clusters=3, random_state=0).fit(data_aft_k[['co2','Forest_area']])
    kmeans2.inertia_
    kmeans2.cluster_centers_
    data_aft_k['cluster'] = kmeans2.labels_
    '''cluster shown along the data'''
   
    '''plot for K means clusttering after normalisation'''
    plt.figure()
    sns.scatterplot(x = 'co2', y = 'Forest_area' , hue='cluster', data = data_aft_k)
    plt.title("K-Means after normalisation")
    plt.savefig("scatter plot 2")
    plt.show()
    return


'''function to calculate the error limits'''

def func(x,a,b,c):
    return a * np.exp(-(x-b)**2 / c)


def err_ranges(x, func, param, sigma):
    """
    Calculates the upper and lower limits for the function, parameters and
    sigmas for single value or array x. Functions values are calculated for
    all combinations of +/- sigma and the minimum and maximum is determined.
    Can be used for all number of parameters and sigmas >=1.
   
    """
 
   
    # initiate arrays for lower and upper limits
    lower = func(x, *param)
    upper = lower
   
    uplow = []   # list to hold upper and lower limits for parameters
    for p,s in zip(param, sigma):
        pmin = p - s
        pmax = p + s
        uplow.append((pmin, pmax))
       
    pmix = list(iter.product(*uplow))
   
    for p in pmix:
        y = func(x, *p)
        lower = np.minimum(lower, y)
        upper = np.maximum(upper, y)
    return lower, upper

def scatter_plot():
   
    data_nor = pd.DataFrame()
    forest_area = []
    co2  = []
   
    for i in forest_area_data :
        forest_area.extend(forest_area_data[i])

    for i in co2Gas_data:
        co2.extend(co2Gas_data[i])


    data_nor['forest_area'] = forest_area
    data_nor['co2'] = co2
   
   
    '''plot for scattering'''
    plt.scatter(data_nor['forest_area'],data_nor['co2'])
    plt.title('Scatter plot before curve fitting')
    plt.ylabel('Forest Area')
    plt.xlabel('CO2 gas Emission')
    plt.savefig("scatter plot.png")
    plt.show()
    return


'''adding an exponential function'''
def expoFunc(x,a,b):
    return a**(x+b)


def curve_fitting():
   
    x_data1 = data_fr['Forest_area']
    y_data1 = data_fr['co2']
    popt, pcov = curve_fit(expoFunc,x_data1,y_data1,p0=[1,0])
    ab_opt, bc_opt = popt
    x_mod = np.linspace(min(x_data1),max(x_data1),100)
    y_mod = expoFunc(x_mod,ab_opt,bc_opt)


    '''plot for scattering after fitting the curve'''
    plt.scatter(x_data1,y_data1)
    plt.plot(x_mod,y_mod,color = 'r')
    plt.title('Scatter plot after the curve fitting')
    plt.ylabel('Forest_area')
    plt.xlabel('CO2 gas emission')
    plt.savefig("curve_and_Cluster.png")
    plt.show()
    return

countries = ['Germany', 'Brazil', 'Argentina', 'France', 'India', 'Portugal']

#dataset with data regarding the total greenhouse emissions from a period of year 1994-2012
org_forest_data, forest_area_data = read_and_filter_csv("/Users/vishnuv/Desktop/applied 2/greenhouse gas.csv")
   

#dataset with data regarding the total methane gas emission from a period of year 1994-2012
org_co2_data, co2Gas_data = read_and_filter_csv("/Users/vishnuv/Downloads/co2 (1).csv")

# calling functions
data_fr = pair_plot()
scatter_plot_(data_fr)
scatter_plot()
curve_fitting()
